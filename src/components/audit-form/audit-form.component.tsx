import React, { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { formatDatetime, parseDate } from "@openmrs/esm-framework";
import {
  FormGroup,
  Select,
  SelectItem,
  Stack,
  TextArea,
  TextInput,
} from "@carbon/react";
import type { EncounterType, Schema } from "../../types";
import { useEncounterTypes } from "../../hooks/useEncounterTypes";

type FormGroupData = {
  name: string;
  uuid: string;
  version: string;
  encounterType: EncounterType;
  description: string;
  display?: string;
  auditInfo: string;
};

type AuditFormProps = {
  form: FormGroupData;
  schema: Schema;
};

const AuditForm: React.FC<AuditFormProps> = ({ form, schema }) => {
  const { t } = useTranslation();
  const { encounterTypes } = useEncounterTypes();
  const [isInvalidVersion, setIsInvalidVersion] = useState(false);
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [encounterType, setEncounterType] = useState("");
  const [version, setVersion] = useState("");
  const [auditInfo, setAuditInfo] = useState(null);

  useEffect(() => {
    if (schema) {
      setName(schema.name);
      setDescription(schema.description);
      setEncounterType(schema.encounterType);
      setVersion(schema.version);
    }
  }, [schema]);

  useEffect(() => {
    if (form) {
      setAuditInfo(form.auditInfo);
    }
  }, [form]);

  const checkVersionValidity = (version: string) => {
    if (!version) return setIsInvalidVersion(false);

    setIsInvalidVersion(!/^[0-9]/.test(version));
  };

  return (
    <>
      <FormGroup legendText={""}>
        <Stack gap={5}>
          <TextInput
            id="name"
            labelText={t("formName", "Form name")}
            onChange={(event) => setName(event.target.value)}
            placeholder={t(
              "formNamePlaceholder",
              "e.g. OHRI Express Care Patient Encounter Form"
            )}
            required
            readOnly
            value={name}
          />

          <TextInput
            id="uuid"
            labelText={t("autogeneratedUuid", "Form UUID")}
            readOnly
            value={form?.uuid}
          />

          <TextInput
            id="version"
            labelText={t("version", "Version")}
            placeholder="e.g. 1.0"
            onChange={(event) => {
              checkVersionValidity(event.target.value);

              if (!isInvalidVersion) {
                setVersion(event.target.value);
              }
            }}
            invalid={isInvalidVersion}
            readOnly
            invalidText={t(
              "invalidVersionWarning",
              "Version can only start with with a number"
            )}
            required
            value={version}
          />
          <Select
            id="encounterType"
            labelText={t("encounterType", "Encounter Type")}
            onChange={(event) => setEncounterType(event.target.value)}
            required
            readOnly
            value={encounterType}
          >
            {!encounterType ? (
              <SelectItem
                text={t(
                  "chooseEncounterType",
                  "Choose an encounter type to link your form to"
                )}
                value=""
              />
            ) : null}
            {encounterTypes?.length > 0 &&
              encounterTypes.map((encounterType) => (
                <SelectItem
                  key={encounterType.uuid}
                  value={encounterType.uuid}
                  text={encounterType.name}
                >
                  {encounterType.name}
                </SelectItem>
              ))}
          </Select>
          <TextArea
            labelText={t("description", "Description")}
            onChange={(event) => setDescription(event.target.value)}
            cols={6}
            rows={3}
            readOnly
            id="description"
            placeholder={t(
              "descriptionPlaceholderText",
              "e.g. A form used to collect encounter data for clients in the Express Care program."
            )}
            required
            value={description}
          />
          <TextArea
            labelText={t("createdBy", "Created By")}
            cols={6}
            rows={1}
            id="description"
            readOnly
            placeholder={t("createdByPlaceholderText", "e.g. Bruce Wayne")}
            required
            value={`${auditInfo?.creator?.display} on ${formatDatetime(
              parseDate(auditInfo?.dateCreated)
            )}`}
          />
          <TextArea
            labelText={t("editedBy", "Last Edited By")}
            onChange={(event) => setAuditInfo(event.target.value)}
            cols={6}
            rows={1}
            id="description"
            placeholder={t("editedByPlaceholderText", "e.g. Bruce Wayne")}
            readOnly
            required
            value={`${auditInfo?.creator?.display} on ${formatDatetime(
              parseDate(auditInfo?.dateCreated)
            )}`}
          />
        </Stack>
      </FormGroup>
    </>
  );
};

export default AuditForm;
