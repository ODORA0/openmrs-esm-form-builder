import React, { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import { formatDatetime, parseDate } from "@openmrs/esm-framework";
import {
  // SelectItem,
  StructuredListWrapper,
  StructuredListRow,
  StructuredListCell,
  StructuredListBody,
} from "@carbon/react";
import type { EncounterType, Schema } from "../../types";
import { useEncounterTypes } from "../../hooks/useEncounterTypes";

type FormGroupData = {
  name: string;
  uuid: string;
  version: string;
  encounterType: EncounterType;
  description: string;
  display?: string;
  auditInfo: string;
};

type AuditFormProps = {
  form: FormGroupData;
  schema: Schema;
};

const AuditForm: React.FC<AuditFormProps> = ({ form, schema }) => {
  const { t } = useTranslation();
  const { encounterTypes } = useEncounterTypes();
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [encounterType, setEncounterType] = useState("");
  const [version, setVersion] = useState("");
  const [auditInfo, setAuditInfo] = useState(null);

  useEffect(() => {
    if (schema) {
      setName(schema.name);
      setDescription(schema.description);
      setEncounterType(schema.encounterType);
      setVersion(schema.version);
    }
  }, [schema]);

  useEffect(() => {
    if (form) {
      setAuditInfo(form.auditInfo);
    }
  }, [form]);

  return (
    <>
      <StructuredListWrapper>
        <StructuredListBody>
          <StructuredListRow>
            <StructuredListCell>{t("formName")}</StructuredListCell>
            <StructuredListCell>
              {(event) => setName(event.target.value)}
              {name
                ? name
                : t(
                    "formNamePlaceholder",
                    "e.g. OHRI Express Care Patient Encounter Form"
                  )}
            </StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("autogeneratedUuid")}</StructuredListCell>
            <StructuredListCell>{form?.uuid}</StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("version")}</StructuredListCell>
            <StructuredListCell>
              {version ? version : t("formVersionPlaceholder", "e.g. 1.0.0")}
              {(event) => {
                setVersion(event.target.value);
              }}
            </StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("encounterType")}</StructuredListCell>
            <StructuredListCell>
              {(event) => setEncounterType(event.target.value)}
              {encounterType
                ? encounterType
                : t(
                    "formNamePlaceholder",
                    "e.g. OHRI Express Care Patient Encounter Form"
                  )}

              {/* {encounterTypes?.length > 0 &&
                encounterTypes.map((encounterType) => (
                  <SelectItem
                    key={encounterType.uuid}
                    value={encounterType.uuid}
                    text={encounterType.name}
                  >
                    {encounterType.name}
                  </SelectItem>
                ))} */}
            </StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("description")}</StructuredListCell>
            <StructuredListCell>
              {(event) => setDescription(event.target.value)}
              {description
                ? description
                : t(
                    "descriptionPlaceholderText",
                    "e.g. A form used to collect encounter data for clients in the Express Care program."
                  )}
            </StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("createdBy")}</StructuredListCell>
            <StructuredListCell>
              {`${auditInfo?.creator?.display} on ${formatDatetime(
                parseDate(auditInfo?.dateCreated)
              )}`}
            </StructuredListCell>
          </StructuredListRow>
          <StructuredListRow>
            <StructuredListCell>{t("editedBy")}</StructuredListCell>
            <StructuredListCell>
              {/* { {auditInfo?.creator?.display} on ${formatDatetime(
                parseDate(auditInfo?.dateCreated)
              )}
                ? description
                : t(
                    "descriptionPlaceholderText",
                    "e.g. A form used to collect encounter data for clients in the Express Care program."
                  )} */}
              {`${auditInfo?.creator?.display} on ${formatDatetime(
                parseDate(auditInfo?.dateCreated)
              )}`}
            </StructuredListCell>
          </StructuredListRow>
        </StructuredListBody>
      </StructuredListWrapper>
    </>
  );
};

export default AuditForm;
